// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VMS.Data;

#nullable disable

namespace VMS.Migrations
{
    [DbContext(typeof(VisitorManagementDbContext))]
    [Migration("20240808100516_ModifiedFormSubmissionModeColumnInVisitorTableToNullableColumn")]
    partial class ModifiedFormSubmissionModeColumnInVisitorTableToNullableColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VMS.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("device_name");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_device");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_device_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_device_updated_by");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("VMS.Models.OfficeLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("office_location_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_office_location");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_office_location_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_office_location_updated_by");

                    b.ToTable("office_location", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Technopark Phase 1, Trivandrum",
                            Name = "Thejaswini",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Technopark Phase 1, Trivandrum",
                            Name = "Gayathri",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Infopark, Cochin",
                            Name = "Athulya",
                            Status = 1
                        });
                });

            modelBuilder.Entity("VMS.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("page_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("page_name");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("page_url");

                    b.HasKey("Id")
                        .HasName("pk_page");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_page_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_page_updated_by");

                    b.ToTable("page", (string)null);
                });

            modelBuilder.Entity("VMS.Models.PageControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("page_control_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PageId")
                        .HasColumnType("integer")
                        .HasColumnName("page_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_page_control");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_page_control_created_by");

                    b.HasIndex(new[] { "PageId" }, "fk_page_control_page_id");

                    b.HasIndex(new[] { "RoleId" }, "fk_page_control_role_id");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_page_control_updated_by");

                    b.ToTable("page_control", (string)null);
                });

            modelBuilder.Entity("VMS.Models.PurposeOfVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("purpose_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purpose_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_purpose_of_visit");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_purpose_of_visit_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_purpose_of_visit_updated_by");

                    b.ToTable("purpose_of_visit", (string)null);
                });

            modelBuilder.Entity("VMS.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role_name");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_role_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_role_updated_by");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("VMS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("IsActive")
                        .HasColumnType("integer")
                        .HasColumnName("is_active");

                    b.Property<int?>("IsLoggedIn")
                        .HasColumnType("integer")
                        .HasColumnName("is_logged_in");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_user_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_user_updated_by");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "system",
                            Username = "system"
                        });
                });

            modelBuilder.Entity("VMS.Models.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_details_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<int>("OfficeLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("office_location_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_details");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_user_details_created_by");

                    b.HasIndex(new[] { "OfficeLocationId" }, "fk_user_details_office_location_id");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_user_details_updated_by");

                    b.HasIndex(new[] { "UserId" }, "fk_user_details_user_id");

                    b.ToTable("user_details", (string)null);
                });

            modelBuilder.Entity("VMS.Models.UserLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_location_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("OfficeLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("office_location_id");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_location");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_user_location_created_by");

                    b.HasIndex(new[] { "OfficeLocationId" }, "fk_user_location_office_location_id");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_user_location_updated_by");

                    b.HasIndex(new[] { "UserId" }, "fk_user_location_user_id");

                    b.ToTable("user_location", (string)null);
                });

            modelBuilder.Entity("VMS.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_user_role_created_by");

                    b.HasIndex(new[] { "RoleId" }, "fk_user_role_role_id");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_user_role_updated_by");

                    b.HasIndex(new[] { "UserId" }, "fk_user_role_user_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("VMS.Models.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("visitor_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("check_in_time");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("check_out_time");

                    b.Property<int?>("CheckedInBy")
                        .HasColumnType("integer")
                        .HasColumnName("checked_in_by");

                    b.Property<int?>("CheckedOutBy")
                        .HasColumnType("integer")
                        .HasColumnName("checked_out_by");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FormSubmissionMode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("form_submission_mode");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("host_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("visitor_name");

                    b.Property<int>("OfficeLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("office_location_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.Property<int>("PurposeId")
                        .HasColumnType("integer")
                        .HasColumnName("purpose_id");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("visit_date");

                    b.Property<int?>("VisitorPassCode")
                        .HasColumnType("integer")
                        .HasColumnName("visitor_pass_code");

                    b.HasKey("Id")
                        .HasName("pk_visitor");

                    b.HasIndex(new[] { "CheckedInBy" }, "fk_visitor_checked_in_by_id");

                    b.HasIndex(new[] { "CheckedOutBy" }, "fk_visitor_checked_out_by_id");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_visitor_created_by");

                    b.HasIndex(new[] { "OfficeLocationId" }, "fk_visitor_location_id");

                    b.HasIndex(new[] { "PurposeId" }, "fk_visitor_purpose_id");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_visitor_updated_by");

                    b.ToTable("visitor", (string)null);
                });

            modelBuilder.Entity("VMS.Models.VisitorDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("visitor_device_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("serial_number");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("VisitorId")
                        .HasColumnType("integer")
                        .HasColumnName("visitor_id");

                    b.HasKey("Id")
                        .HasName("pk_visitor_device");

                    b.HasIndex(new[] { "DeviceId" }, "fk_device_id");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_visitor_device_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_visitor_device_updated_by");

                    b.HasIndex(new[] { "VisitorId" }, "fk_visitor_id");

                    b.ToTable("visitor_device", (string)null);
                });

            modelBuilder.Entity("VMS.Models.Device", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("DeviceCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_device_created_by");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("DeviceUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_device_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("VMS.Models.OfficeLocation", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("OfficeLocationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_office_location_created_by");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("OfficeLocationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_office_location_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("VMS.Models.Page", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("PageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_page_created_by");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("PageUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_page_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("VMS.Models.PageControl", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("PageControlCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_page_control_created_by");

                    b.HasOne("VMS.Models.Page", "Page")
                        .WithMany("PageControls")
                        .HasForeignKey("PageId")
                        .IsRequired()
                        .HasConstraintName("fk_page_control_page_id");

                    b.HasOne("VMS.Models.Role", "Role")
                        .WithMany("PageControls")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_page_control_role_id");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("PageControlUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_page_control_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Page");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("VMS.Models.PurposeOfVisit", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("PurposeOfVisitCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_purpose_of_visit_created_by");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("PurposeOfVisitUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_purpose_of_visit_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("VMS.Models.Role", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("RoleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_role_created_by");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("RoleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_role_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("VMS.Models.User", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_user_created_by");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_user_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("VMS.Models.UserDetail", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("UserDetailCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_user_details_created_by");

                    b.HasOne("VMS.Models.OfficeLocation", "OfficeLocation")
                        .WithMany("UserDetails")
                        .HasForeignKey("OfficeLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_details_office_location_id");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("UserDetailUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_user_details_updated_by");

                    b.HasOne("VMS.Models.User", "User")
                        .WithMany("UserDetailUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_details_user_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OfficeLocation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Models.UserLocation", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("UserLocationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_user_location_created_by");

                    b.HasOne("VMS.Models.OfficeLocation", "OfficeLocation")
                        .WithMany("UserLocations")
                        .HasForeignKey("OfficeLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_location_office_location_id");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("UserLocationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_user_location_updated_by");

                    b.HasOne("VMS.Models.User", "User")
                        .WithMany("UserLocationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_location_user_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OfficeLocation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Models.UserRole", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("UserRoleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_user_role_created_by");

                    b.HasOne("VMS.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_id");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("UserRoleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_user_role_updated_by");

                    b.HasOne("VMS.Models.User", "User")
                        .WithMany("UserRoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Models.Visitor", b =>
                {
                    b.HasOne("VMS.Models.User", "CheckedInByNavigation")
                        .WithMany("VisitorUsers")
                        .HasForeignKey("CheckedInBy")
                        .HasConstraintName("fk_visitor_checked_in_id");

                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("VisitorCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_visitor_created_by");

                    b.HasOne("VMS.Models.OfficeLocation", "OfficeLocation")
                        .WithMany("Visitors")
                        .HasForeignKey("OfficeLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_visitor_location_id");

                    b.HasOne("VMS.Models.PurposeOfVisit", "Purpose")
                        .WithMany("Visitors")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_visitor_purpose_id");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("VisitorUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_visitor_updated_by");

                    b.Navigation("CheckedInByNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OfficeLocation");

                    b.Navigation("Purpose");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("VMS.Models.VisitorDevice", b =>
                {
                    b.HasOne("VMS.Models.User", "CreatedByNavigation")
                        .WithMany("VisitorDeviceCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_visitor_device_created_by");

                    b.HasOne("VMS.Models.Device", "Device")
                        .WithMany("VisitorDevices")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("fk_device_id");

                    b.HasOne("VMS.Models.User", "UpdatedByNavigation")
                        .WithMany("VisitorDeviceUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_visitor_device_updated_by");

                    b.HasOne("VMS.Models.Visitor", "Visitor")
                        .WithMany("VisitorDevices")
                        .HasForeignKey("VisitorId")
                        .IsRequired()
                        .HasConstraintName("fk_visitor_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Device");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("VMS.Models.Device", b =>
                {
                    b.Navigation("VisitorDevices");
                });

            modelBuilder.Entity("VMS.Models.OfficeLocation", b =>
                {
                    b.Navigation("UserDetails");

                    b.Navigation("UserLocations");

                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("VMS.Models.Page", b =>
                {
                    b.Navigation("PageControls");
                });

            modelBuilder.Entity("VMS.Models.PurposeOfVisit", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("VMS.Models.Role", b =>
                {
                    b.Navigation("PageControls");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("VMS.Models.User", b =>
                {
                    b.Navigation("DeviceCreatedByNavigations");

                    b.Navigation("DeviceUpdatedByNavigations");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("OfficeLocationCreatedByNavigations");

                    b.Navigation("OfficeLocationUpdatedByNavigations");

                    b.Navigation("PageControlCreatedByNavigations");

                    b.Navigation("PageControlUpdatedByNavigations");

                    b.Navigation("PageCreatedByNavigations");

                    b.Navigation("PageUpdatedByNavigations");

                    b.Navigation("PurposeOfVisitCreatedByNavigations");

                    b.Navigation("PurposeOfVisitUpdatedByNavigations");

                    b.Navigation("RoleCreatedByNavigations");

                    b.Navigation("RoleUpdatedByNavigations");

                    b.Navigation("UserDetailCreatedByNavigations");

                    b.Navigation("UserDetailUpdatedByNavigations");

                    b.Navigation("UserDetailUsers");

                    b.Navigation("UserLocationCreatedByNavigations");

                    b.Navigation("UserLocationUpdatedByNavigations");

                    b.Navigation("UserLocationUsers");

                    b.Navigation("UserRoleCreatedByNavigations");

                    b.Navigation("UserRoleUpdatedByNavigations");

                    b.Navigation("UserRoleUsers");

                    b.Navigation("VisitorCreatedByNavigations");

                    b.Navigation("VisitorDeviceCreatedByNavigations");

                    b.Navigation("VisitorDeviceUpdatedByNavigations");

                    b.Navigation("VisitorUpdatedByNavigations");

                    b.Navigation("VisitorUsers");
                });

            modelBuilder.Entity("VMS.Models.Visitor", b =>
                {
                    b.Navigation("VisitorDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
